=====================================
Web Fundamentals
=====================================
1. What happens when you type http://www.google.com
2. Difference between http and https. How to enable https for APIs
3. HTTP metods - get, post, put, delete, patch ( know them)
4. Difference btn Post vs Put
5. What is Rest API? Why known as RESTful? How is works
6. How to enable https for Rest APIs
7. How to improve web performance ( Know about DNS caching, PRPL, Laze loading etc)


====================================
JavaScript, jQuery, ES6/7/8/ES2020
====================================
1. Type of functions & example, uses:
- Callback function?
- Self Invoking function / IIFE - Immediately Invoking Function Expressions
- Higher-order function? Difference better Higher-order vs Callback
2. What is Closure?
3. How many types of data type available
4. Ability to write a recursive function
5. How many types of syntax are there to define object
6. Ajax - status code, make sync, promise
7. JavaScript Operators typeof, == , ===, ~
8. What would be the output?

1+2+"4"+1+2
1+"1"+1
TRUE+TRUE
TRUE+7
FALSE+1+TRUE
FALSE+"1"+TRUE

9. How to create a class in JS
10. Explain Inheritance in JavaScript - Classical , prototypal inheritance. If answer is correct ask to add a method [average] in Array using prototype like below 

var arr = [1, 2, 3, 4, 5];
var avg = arr.average();
console.log(avg);

Array.prototype.average = function(){
	this.reduce(function(accumulator, currentVal){
		return ((accumulator+currentVal)/this.length);
	});
}
11. Is setTimeout() is a callback function?
12. What is Memoization? Explain with example.
13. Hoisting
15. What is arrow function what is the diff between regular function and arrow function? Advantage, How this keyword works in it.
16. Diff between var, let, const
17. What is console object
18. Arrow function, this keyword in arrow function.
19. Spread operator (... operator )& its uses
20. Shallow copy, Deep copy in JavaScript
21. Array copy

let array1 = [1, 2, 3]; 
let array2 = array1;
array2.push(4);
console.log(array2); // [1, 2, 3, 4 ] 
console.log(array1); // [1, 2, 3, 4 ]  as array are passed by ref.

now copy using spread operator
let array1 = [1, 2, 3]; 
let array2 = [...array1];
array2.push(4);
console.log(arr2); // [1, 2, 3, 4 ] 
console.log(arr1); // [1, 2, 3 ]

21. What is generator function. function*() {}

22. What would be the output? Why

var arr1 = "john".split(''); //['j', 'o', 'h', 'n']
var arr2 = arr1.reverse(); // ['n', 'h', 'o', 'j']
var arr3 = "jones".split(''); // ['j', 'o', 'n', 'e', 's']
arr2.push(arr3); // ['n', 'h', 'o', 'j', ['j', 'o', 'n', 'e', 's']]
console.log("array 1: length=" + arr1.length + " last=" + arr1.slice(-1)); 
//array 1: length=5 last=j,o,n,e,s
console.log("array 2: length=" + arr2.length + " last=" + arr2.slice(-1)); 
//array 2: length=5 last=j,o,n,e,s

23. What would be the output?
const length = 4;
const numbers = []; //5
for (var i = 0; i < length; i++);{
  numbers.push(i + 1);
}

24. How do you flat / sum the array? [ES6 flat()]

let arr = [[1, 2],[3, 4, [5, 6, [7, 8], 9]],[10, [11, 12]]];
arr.flat(5); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

OR

let arr = [[1, 2],[3, 4, [5, 6, [7, 8], 9]],[10, [11, 12]]];
arr.flat(Infinity); //[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

SUM

let arr = [[1, 2],[3, 4, [5, 6, [7, 8], 9]],[10, [11, 12]]];
arr.flat(Infinity).reduce(function(a,c){
    return a+c;
});
//78


25. What is currying function? Give an example

sum(2)(3)(10)(15);

function sum(a){
	return function(b){
		return function(c){
			return function(d){
				return (a+b+c+d);
			}
		}
	}
}

26. How do you exit from the above for loop without using break, any condition etc?
for(var i = 0; i<10; i++){
	for(var j=0; j<5; j++){
	}
}


27. What is double questions mark (??) operator?
28. How many ways are there to create object in JS? Explain all those. When we need those.
29. Explain Callstack
30. Explain Event Loop
31. Higher-order functions
32. Generator functions
33. Promises
34. Async & Await
35. Scope
36. call(), apply(), bind() and this keyword /function borrowing
37. Currying functions
38. Pure Functions
39. Debouncing and Throttling
40. Shallow copy, Deep Copy
41. Event Bubbling
42. Event Capturing
43. Function expression and Function declaration
44. use strict
45. Array methods (map, reduce, filter)
46. Map Set
47. Execute setTimeout() from a for loop. What would be the output & why?

for(var i = 0; i<5 ; i++){
    setTimeout(function(){
        console.log(i);
    }); // set 0 here and ask what would be output. same output
}
// 5 times 5

Now, replace var with let


for(let i = 0; i<5 ; i++){
    setTimeout(function(){
        console.log(i);
    });
}
// 0, 1, 2, 3, 4


48. Find sum of array elements using single function? How will you calculate depth of array
var a = [1,2,[3,4, [5,6],7,8],9,10]
I did using flat() reduce ()
49. what are new features of ES6
50. Object.freeze() vs const (need to study)
51. Write a function to check data type if Array or Object

(function(data){
if(Object.prototype.toString.call(data) == '[object Array]'){
console.log('Array');
}
if(Object.prototype.toString.call(data) == '[object Object]'){
console.log('Object');
}
})({'name': 'saikat'})

51. Sort array in ascending order
var arr = [7, 88, 99, 223, 1, 3];
for(var i = 0; i<arr.length; i++){
	var target = arr[i];
	for(var j = i-1; j>=0 && (arr[j]>target); j--){
		arr[j+1] = arr[j];
	}
	arr[j+1]=target;
}
console.log(arr)

52.  What will be the output & why?

var myObject = {
	price: 20.99, 
    get_price : function() { 
		return this.price; 
	} 
}; 

var customObject = Object.create(myObject); 
customObject.price = 19.99; 
delete customObject.price;
console.log(customObject.get_price());  //20.99

Reason: Object.create creates a new object by using existing object prototype. First JS will check if price is there in customObject. if not found then will find in its __proto__

customObject
	price: 19.99
	__proto__
		price: 20.99
		__proto__
			Object


53. What is callback hell & how to avoid it
54.debouncing vs throttling
55. arrow function vs normal function

==============================================
Angular 6/7/8/9/10
==============================================
1. How to pass data from one comment to another component.
Ans: @Input() childMsg

2. Diff JIT vs AOT build
Ans: JIT - when we run from dev env in browser
AOT - ng build --prod

3. What is promise?
Ans: A JS object for async operation
var p = new Promise((resolve, reject)=>{
	
});


4. Promise vs Observable
https://www.syncfusion.com/blogs/post/angular-promises-versus-observables.aspx


5. What is lazy loading
6. How to know an angular app is having lazy loading features without seeing codebase
7. How to handle application state (using Redux)
8. Event, property binding
9. Diff constructor vs ngOnInit
10. Service to be used by a specific component using providedIn? What is any, root?
11. Ivy compilation (ng v9)
12. Call multiple http asynchronously
13. Rxjs operators (state handling)
14. Do you know ngrx library?
15. What is @HostBinding , @HostListerer

@HostListerer is used to listen any events generated for a element
@HostBinding binds attribute to that host element


16. What is the difference between on push & default strategy
17. What is ViewProvider, purpose of it
18. How to handle styling? Explain viewEncapsulation
19. Explain advantage, disadvange of SPA. How to overcome SEO issue (Explain SSR Concepts)
20. Diff - ViewChild, ContainerChild
21. Diff - CanLoad, CanActivate, CanDeactivate
22. Major thing why Google think to introduce Angular2 (diff Angular.js vs Angular)
23. How to handle multiple observables once after another based on retunr respose of one after another

==============================================
HTML5, CSS3
==============================================
1. Understand concept of view port or any meta tags, SEO meta tags etc
2. Box model - margin, border, padding 
3. Diff values for padding, margin
4. CSS position - static, fixed, absolute, relative, sticky
5. How make application responsive
6. Ability to write media query
7. Html 5 API - localstorage, session storage, geo location
8. If I want to know from which location website is getting access how to know (understand concept of geo location)
9. Location specific advertisement to display
10. col-md-4 are printing via loop. Need to add div.row per 4 div. What would be the approach.
11. Diff display  - block, inline block, none, flex
12. Diff display:grid vs display: flex
13. CSS inheritance (using !important)
14. CSS pseudo elements (before, after, hover, active, focus, visited)
15. What is storage limit of localstorage? How to get 10 mb storage in browser?
16. Diff - em, rem
17. You have text at left side, radio button at right side. On clicking on text how to check radion button ?
Ans: Add <label for="radioBtnId">Text<label>
18. What is Skeleton loading / Skeleton model ?
https://css-tricks.com/building-skeleton-screens-css-custom-properties/

Agile (Scrum)/Project Management
===========================
1. What is difference agile and waterfall (explained)
2. Scrum 3 roles of Scrum (Product Owner, Scrum Master, Dev Team)
3. Which agile framework you use (said scrum)
4. How many team member are there in scrum team( said 10. Got cross questions that there should be 7-9 why 10)
5. What is your role
6. How to meet date line
7. How to resolve conflict in your team members?
8. What are Development approach you follow (coding, review, staging etc)?
9. What are scenario in scrum ceremony/scrum events? (Sprint Planning, Daily Scrum, Sprint Review, Sprint Retrospective)
10. Do you have scrum master certificate? If we ask to get it in how many days you can learn it ?
11. How do you manage if any production issue come and client escalate in call
12. As u work in scrum so are u working in shift? I said we have general shift as TPM is from offshore?
13. Tell me what 2 major critical issues u faced in angular and how did you resolved those?



2022
=========
1. Angular contentChild vs viewChild()
2. Microfront end architecture
3. Design patterns - Singleton, factory etc with explanation
4. Design principles - solid etc
5. ngContent
6. forRoot, forChildren
7. Application architecture